{
  "engineConfig": {
    "defaultFlushInterval": "500",
    "datasourceConfigurations": [
      {
        "kind": "GRAPHQL",
        "rootNodes": [
          {
            "typeName": "Query",
            "fieldNames": [
              "account"
            ]
          },
          {
            "typeName": "User",
            "fieldNames": [
              "id"
            ]
          }
        ],
        "childNodes": [
          {
            "typeName": "Account",
            "fieldNames": [
              "user"
            ]
          }
        ],
        "overrideFieldPathFromAlias": true,
        "customGraphql": {
          "fetch": {
            "url": {},
            "method": "POST",
            "body": {},
            "baseUrl": {},
            "path": {}
          },
          "subscription": {
            "enabled": true,
            "url": {},
            "protocol": "GRAPHQL_SUBSCRIPTION_PROTOCOL_WS",
            "websocketSubprotocol": "GRAPHQL_WEBSOCKET_SUBPROTOCOL_AUTO"
          },
          "federation": {
            "enabled": true,
            "serviceSdl": "\n\t\ttype Query {\n\t\t\taccount: Account\n\t\t}\n\t\ttype Account {\n\t\t\tuser: User\n\t\t}\n\t\ttype User @key(fields: \"id\", resolvable: false) {\n\t\t\tid: Int\n\t\t}\n\t\t\t"
          },
          "upstreamSchema": {
            "key": "2606f5168ddc61bf076c29575c9d668fb940a6bb"
          }
        },
        "requestTimeoutSeconds": "10",
        "id": "0",
        "keys": [
          {
            "typeName": "User",
            "selectionSet": "id",
            "disableEntityResolver": true
          }
        ]
      },
      {
        "kind": "GRAPHQL",
        "rootNodes": [
          {
            "typeName": "Query",
            "fieldNames": [
              "team"
            ]
          },
          {
            "typeName": "User",
            "fieldNames": [
              "age"
            ]
          }
        ],
        "childNodes": [
          {
            "typeName": "Team",
            "fieldNames": [
              "user"
            ]
          }
        ],
        "overrideFieldPathFromAlias": true,
        "customGraphql": {
          "fetch": {
            "url": {},
            "method": "POST",
            "body": {},
            "baseUrl": {},
            "path": {}
          },
          "subscription": {
            "enabled": true,
            "url": {},
            "protocol": "GRAPHQL_SUBSCRIPTION_PROTOCOL_WS",
            "websocketSubprotocol": "GRAPHQL_WEBSOCKET_SUBPROTOCOL_AUTO"
          },
          "federation": {
            "enabled": true,
            "serviceSdl": "\n\t\ttype Query {\n\t\t\tteam: Team\n\t\t}\n\t\ttype Team {\n\t\t\tuser: User\n\t\t}\n\t\ttype User @key(fields: \"age\", resolvable: false) {\n\t\t\tage: Int\n\t\t}"
          },
          "upstreamSchema": {
            "key": "333957049e0afe895cd5cad22e8414cf75e1573b"
          }
        },
        "requestTimeoutSeconds": "10",
        "id": "1",
        "keys": [
          {
            "typeName": "User",
            "selectionSet": "age",
            "disableEntityResolver": true
          }
        ]
      },
      {
        "kind": "GRAPHQL",
        "rootNodes": [
          {
            "typeName": "Query",
            "fieldNames": [
              "user"
            ]
          },
          {
            "typeName": "User",
            "fieldNames": [
              "id",
              "age",
              "salary"
            ]
          }
        ],
        "overrideFieldPathFromAlias": true,
        "customGraphql": {
          "fetch": {
            "url": {},
            "method": "POST",
            "body": {},
            "baseUrl": {},
            "path": {}
          },
          "subscription": {
            "enabled": true,
            "url": {},
            "protocol": "GRAPHQL_SUBSCRIPTION_PROTOCOL_WS",
            "websocketSubprotocol": "GRAPHQL_WEBSOCKET_SUBPROTOCOL_AUTO"
          },
          "federation": {
            "enabled": true,
            "serviceSdl": "\n\t\t\ttype Query {\n\t\t\t\tuser: User\n\t\t\t}\n\t\t\ttype User @key(fields: \"id\") @key(fields: \"age\") {\n\t\t\t\tid: Int\n\t\t\t\tage: Int\n\t\t\t\tsalary: Int\n\t\t\t }\n\t "
          },
          "upstreamSchema": {
            "key": "dc859ad1ab7c2b056e09ca915af0b81b443200b9"
          }
        },
        "requestTimeoutSeconds": "10",
        "id": "2",
        "keys": [
          {
            "typeName": "User",
            "selectionSet": "id"
          },
          {
            "typeName": "User",
            "selectionSet": "age"
          }
        ]
      }
    ],
    "graphqlSchema": "directive @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ntype Query {\n  account: Account\n  team: Team\n  user: User\n}\n\ntype Account {\n  user: User\n}\n\ntype User {\n  id: Int\n  age: Int\n  salary: Int\n}\n\ntype Team {\n  user: User\n}",
    "stringStorage": {
      "2606f5168ddc61bf076c29575c9d668fb940a6bb": "schema {\n  query: Query\n}\n\ndirective @extends on INTERFACE | OBJECT\n\ndirective @external on FIELD_DEFINITION | OBJECT\n\ndirective @key(fields: openfed__FieldSet!, resolvable: Boolean = true) repeatable on INTERFACE | OBJECT\n\ndirective @provides(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ntype Account {\n  user: User\n}\n\ntype Query {\n  account: Account\n}\n\ntype User @key(fields: \"id\", resolvable: false) {\n  id: Int\n}\n\nscalar openfed__FieldSet",
      "333957049e0afe895cd5cad22e8414cf75e1573b": "schema {\n  query: Query\n}\n\ndirective @extends on INTERFACE | OBJECT\n\ndirective @external on FIELD_DEFINITION | OBJECT\n\ndirective @key(fields: openfed__FieldSet!, resolvable: Boolean = true) repeatable on INTERFACE | OBJECT\n\ndirective @provides(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ntype Query {\n  team: Team\n}\n\ntype Team {\n  user: User\n}\n\ntype User @key(fields: \"age\", resolvable: false) {\n  age: Int\n}\n\nscalar openfed__FieldSet",
      "dc859ad1ab7c2b056e09ca915af0b81b443200b9": "schema {\n  query: Query\n}\n\ndirective @extends on INTERFACE | OBJECT\n\ndirective @external on FIELD_DEFINITION | OBJECT\n\ndirective @key(fields: openfed__FieldSet!, resolvable: Boolean = true) repeatable on INTERFACE | OBJECT\n\ndirective @provides(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ntype Query {\n  user: User\n}\n\ntype User @key(fields: \"id\") @key(fields: \"age\") {\n  age: Int\n  id: Int\n  salary: Int\n}\n\nscalar openfed__FieldSet"
    },
    "graphqlClientSchema": "type Query {\n  account: Account\n  team: Team\n  user: User\n}\n\ntype Account {\n  user: User\n}\n\ntype User {\n  id: Int\n  age: Int\n  salary: Int\n}\n\ntype Team {\n  user: User\n}"
  },
  "subgraphs": [
    {
      "id": "0",
      "name": "Account"
    },
    {
      "id": "1",
      "name": "Team"
    },
    {
      "id": "2",
      "name": "User"
    }
  ]
}